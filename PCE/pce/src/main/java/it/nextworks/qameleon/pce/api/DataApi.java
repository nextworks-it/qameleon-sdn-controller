/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.nextworks.qameleon.pce.api;

import it.nextworks.qameleon.pce.model.TapiCommonCapacityValueWrapper;
import it.nextworks.qameleon.pce.model.TapiCommonCapacityWrapper;
import it.nextworks.qameleon.pce.model.TapiCommonContextWrapper;
import it.nextworks.qameleon.pce.model.TapiCommonNameAndValueWrapper;
import it.nextworks.qameleon.pce.model.TapiCommonServiceInterfacePointRefWrapper;
import it.nextworks.qameleon.pce.model.TapiCommonServiceInterfacePointWrapper;
import it.nextworks.qameleon.pce.model.TapiNotificationNameAndValueChangeWrapper;
import it.nextworks.qameleon.pce.model.TapiNotificationNotificationChannelWrapper;
import it.nextworks.qameleon.pce.model.TapiNotificationNotificationContextWrapper;
import it.nextworks.qameleon.pce.model.TapiNotificationNotificationSubscriptionServiceWrapper;
import it.nextworks.qameleon.pce.model.TapiNotificationNotificationWrapper;
import it.nextworks.qameleon.pce.model.TapiNotificationSubscriptionFilterWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationPathComputationContextWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationPathComputationServiceWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationPathObjectiveFunctionWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationPathOptimizationConstraintWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationPathRefWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationPathServiceEndPointWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationPathWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationRoutingConstraintWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationTopologyConstraintWrapper;
import it.nextworks.qameleon.pce.model.TapiPathComputationValueOrPriorityWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyConnectionSpecReferenceWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyCostCharacteristicWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyInterRuleGroupWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyLatencyCharacteristicWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyLinkRefWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyLinkWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyNepLayerProtocolCapabilityWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyNetworkTopologyServiceWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyNodeEdgePointRefWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyNodeEdgePointWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyNodeRuleGroupRefWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyNodeRuleGroupWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyNodeWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyPortRoleRuleWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyResilienceTypeWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyRiskCharacteristicWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyRuleWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologySignalPropertyRuleWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyTopologyContextWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyTopologyRefWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyTopologyWrapper;
import it.nextworks.qameleon.pce.model.TapiTopologyValidationMechanismWrapper;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-23T14:44:33.242Z")

@Api(value = "data", description = "the data API")
@RequestMapping(value = "")
public interface DataApi {

    @ApiOperation(value = "removes tapi.common.Context", nickname = "dataTapiCommoncontextDelete", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextDelete();


    @ApiOperation(value = "returns tapi.common.Context", nickname = "dataTapiCommoncontextGet", notes = "none", response = TapiCommonContextWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Context", response = TapiCommonContextWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonContextWrapper> dataTapiCommoncontextGet();


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextNamePost(@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextNamevalueNameDelete(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextNamevalueNamePut(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "creates tapi.common.Context", nickname = "dataTapiCommoncontextPost", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextPost(@ApiParam(value = "tapi.common.Context to be added to list"  )  @Valid @RequestBody TapiCommonContextWrapper tapiCommonContextBodyParam);


    @ApiOperation(value = "creates or updates tapi.common.Context", nickname = "dataTapiCommoncontextPut", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextPut(@ApiParam(value = "tapi.common.Context to be added or updated"  )  @Valid @RequestBody TapiCommonContextWrapper tapiCommonContextBodyParam);


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePoint", nickname = "dataTapiCommoncontextServiceInterfacePointPost", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextServiceInterfacePointPost(@ApiParam(value = "tapi.common.ServiceInterfacePoint to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointWrapper tapiCommonServiceInterfacePointBodyParam);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextServiceInterfacePointuuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextServiceInterfacePointuuidAvailableCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextServiceInterfacePointuuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextServiceInterfacePointuuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePoint", nickname = "dataTapiCommoncontextServiceInterfacePointuuidDelete", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextServiceInterfacePointuuidDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePoint", nickname = "dataTapiCommoncontextServiceInterfacePointuuidGet", notes = "none", response = TapiCommonServiceInterfacePointWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePoint", response = TapiCommonServiceInterfacePointWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointWrapper> dataTapiCommoncontextServiceInterfacePointuuidGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextServiceInterfacePointuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextServiceInterfacePointuuidNamePost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextServiceInterfacePointuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextServiceInterfacePointuuidNamevalueNameDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextServiceInterfacePointuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextServiceInterfacePointuuidNamevalueNameGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextServiceInterfacePointuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextServiceInterfacePointuuidNamevalueNamePut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePoint", nickname = "dataTapiCommoncontextServiceInterfacePointuuidPut", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextServiceInterfacePointuuidPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.ServiceInterfacePoint to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointWrapper tapiCommonServiceInterfacePointBodyParam);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextServiceInterfacePointuuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the entity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextServiceInterfacePointuuidTotalPotentialCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.notification.NotificationContext", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextDelete", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextDelete();


    @ApiOperation(value = "returns tapi.notification.NotificationContext", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextGet", notes = "Augments the base TAPI Context with NotificationService information", response = TapiNotificationNotificationContextWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NotificationContext", response = TapiNotificationNotificationContextWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationContextWrapper> dataTapiCommoncontextTapiNotificationnotificationContextGet();


    @ApiOperation(value = "creates tapi.notification.NotificationSubscriptionService", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionPost", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionPost(@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added to list"  )  @Valid @RequestBody TapiNotificationNotificationSubscriptionServiceWrapper tapiNotificationNotificationSubscriptionServiceBodyParam);


    @ApiOperation(value = "removes tapi.notification.NotificationSubscriptionService", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidDelete", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.notification.NotificationSubscriptionService", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidGet", notes = "none", response = TapiNotificationNotificationSubscriptionServiceWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NotificationSubscriptionService", response = TapiNotificationNotificationSubscriptionServiceWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationSubscriptionServiceWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "returns tapi.notification.NotificationChannel", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationChannelGet", notes = "none", response = TapiNotificationNotificationChannelWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NotificationChannel", response = TapiNotificationNotificationChannelWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/notification-channel/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationChannelWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationChannelGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/notification-channel/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet", notes = "none", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/notification={notification-uuid}/additional-info={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of additional-info",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.notification.NameAndValueChange", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet", notes = "none", response = TapiNotificationNameAndValueChangeWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChangeWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/notification={notification-uuid}/changed-attributes={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNameAndValueChangeWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of changed-attributes",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.notification.Notification", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet", notes = "none", response = TapiNotificationNotificationWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.Notification", response = TapiNotificationNotificationWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/notification={notification-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/notification={notification-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet", notes = "none", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/notification={notification-uuid}/target-object-name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of target-object-name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.notification.NotificationSubscriptionService", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidPut", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added or updated"  )  @Valid @RequestBody TapiNotificationNotificationSubscriptionServiceWrapper tapiNotificationNotificationSubscriptionServiceBodyParam);


    @ApiOperation(value = "removes tapi.notification.SubscriptionFilter", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterDelete", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.notification.SubscriptionFilter", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterGet", notes = "none", response = TapiNotificationSubscriptionFilterWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.SubscriptionFilter", response = TapiNotificationSubscriptionFilterWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationSubscriptionFilterWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "creates tapi.notification.SubscriptionFilter", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterPost", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterPost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added to list"  )  @Valid @RequestBody TapiNotificationSubscriptionFilterWrapper tapiNotificationSubscriptionFilterBodyParam);


    @ApiOperation(value = "creates or updates tapi.notification.SubscriptionFilter", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterPut", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notif-subscription={uuid}/subscription-filter/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextNotifSubscriptionuuidSubscriptionFilterPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added or updated"  )  @Valid @RequestBody TapiNotificationSubscriptionFilterWrapper tapiNotificationSubscriptionFilterBodyParam);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidAdditionalInfovalueNameGet", notes = "none", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notification={uuid}/additional-info={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of additional-info",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.notification.NameAndValueChange", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidChangedAttributesvalueNameGet", notes = "none", response = TapiNotificationNameAndValueChangeWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChangeWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notification={uuid}/changed-attributes={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNameAndValueChangeWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of changed-attributes",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.notification.Notification", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidGet", notes = "none", response = TapiNotificationNotificationWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.Notification", response = TapiNotificationNotificationWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notification={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notification={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidTargetObjectNamevalueNameGet", notes = "none", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/notification={uuid}/target-object-name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiNotificationnotificationContextNotificationuuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of target-object-name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates tapi.notification.NotificationContext", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextPost", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextPost(@ApiParam(value = "tapi.notification.NotificationContext to be added to list"  )  @Valid @RequestBody TapiNotificationNotificationContextWrapper tapiNotificationNotificationContextBodyParam);


    @ApiOperation(value = "creates or updates tapi.notification.NotificationContext", nickname = "dataTapiCommoncontextTapiNotificationnotificationContextPut", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-notification:notification-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiNotificationnotificationContextPut(@ApiParam(value = "tapi.notification.NotificationContext to be added or updated"  )  @Valid @RequestBody TapiNotificationNotificationContextWrapper tapiNotificationNotificationContextBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.PathComputationContext", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextDelete", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextDelete();


    @ApiOperation(value = "returns tapi.path.computation.PathComputationContext", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextGet", notes = "Augments the base TAPI Context with PathComputationService information", response = TapiPathComputationPathComputationContextWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathComputationContext", response = TapiPathComputationPathComputationContextWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathComputationContextWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextGet();


    @ApiOperation(value = "creates tapi.path.computation.PathComputationService", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServicePost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServicePost(@ApiParam(value = "tapi.path.computation.PathComputationService to be added to list"  )  @Valid @RequestBody TapiPathComputationPathComputationServiceWrapper tapiPathComputationPathComputationServiceBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.PathComputationService", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.path.computation.PathServiceEndPoint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added to list"  )  @Valid @RequestBody TapiPathComputationPathServiceEndPointWrapper tapiPathComputationPathServiceEndPointBodyParam);


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet", notes = "none", response = TapiCommonCapacityWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacityWrapper tapiCommonCapacityBodyParam);


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityWrapper tapiCommonCapacityBodyParam);


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValueWrapper tapiCommonCapacityValueBodyParam);


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValueWrapper tapiCommonCapacityValueBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.PathServiceEndPoint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.path.computation.PathServiceEndPoint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdGet", notes = "none", response = TapiPathComputationPathServiceEndPointWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathServiceEndPoint", response = TapiPathComputationPathServiceEndPointWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathServiceEndPointWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathServiceEndPoint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathServiceEndPointWrapper tapiPathComputationPathServiceEndPointBodyParam);


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePointRef", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRefWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRefWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePointRef", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRefWrapper tapiCommonServiceInterfacePointRefBodyParam);


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePointRef", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRefWrapper tapiCommonServiceInterfacePointRefBodyParam);


    @ApiOperation(value = "returns tapi.path.computation.PathComputationService", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidGet", notes = "none", response = TapiPathComputationPathComputationServiceWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathComputationService", response = TapiPathComputationPathComputationServiceWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathComputationServiceWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.PathObjectiveFunction", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.PathObjectiveFunction", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionGet", notes = "none", response = TapiPathComputationPathObjectiveFunctionWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathObjectiveFunction", response = TapiPathComputationPathObjectiveFunctionWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathObjectiveFunctionWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "creates tapi.path.computation.PathObjectiveFunction", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added to list"  )  @Valid @RequestBody TapiPathComputationPathObjectiveFunctionWrapper tapiPathComputationPathObjectiveFunctionBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathObjectiveFunction", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/objective-function/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidObjectiveFunctionPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathObjectiveFunctionWrapper tapiPathComputationPathObjectiveFunctionBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.PathOptimizationConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.PathOptimizationConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintGet", notes = "none", response = TapiPathComputationPathOptimizationConstraintWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathOptimizationConstraint", response = TapiPathComputationPathOptimizationConstraintWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathOptimizationConstraintWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "creates tapi.path.computation.PathOptimizationConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationPathOptimizationConstraintWrapper tapiPathComputationPathOptimizationConstraintBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathOptimizationConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidOptimizationConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathOptimizationConstraintWrapper tapiPathComputationPathOptimizationConstraintBodyParam);


    @ApiOperation(value = "returns tapi.path.computation.PathRef", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidPathpathUuidGet", notes = "none", response = TapiPathComputationPathRefWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/path={path-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathRefWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidPathpathUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of path",required=true) @PathVariable("path-uuid") String pathUuid);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathComputationService", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathComputationService to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathComputationServiceWrapper tapiPathComputationPathComputationServiceBodyParam);


    @ApiOperation(value = "creates tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyCostCharacteristicWrapper tapiTopologyCostCharacteristicBodyParam);


    @ApiOperation(value = "removes tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristicWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristicWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "creates or updates tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyCostCharacteristicWrapper tapiTopologyCostCharacteristicBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.RoutingConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraintWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraintWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationRoutingConstraintWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristicWrapper tapiTopologyLatencyCharacteristicBodyParam);


    @ApiOperation(value = "removes tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristicWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristicWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "creates or updates tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristicWrapper tapiTopologyLatencyCharacteristicBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-cost/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostGet", notes = "none", response = TapiPathComputationValueOrPriorityWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.ValueOrPriority", response = TapiPathComputationValueOrPriorityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-cost/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationValueOrPriorityWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-cost/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.ValueOrPriority to be added to list"  )  @Valid @RequestBody TapiPathComputationValueOrPriorityWrapper tapiPathComputationValueOrPriorityBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-cost/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedCostPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.ValueOrPriority to be added or updated"  )  @Valid @RequestBody TapiPathComputationValueOrPriorityWrapper tapiPathComputationValueOrPriorityBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayDelete", notes = "Delay unit is microseconds.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-delay/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayGet", notes = "Delay unit is microseconds.", response = TapiPathComputationValueOrPriorityWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.ValueOrPriority", response = TapiPathComputationValueOrPriorityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-delay/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationValueOrPriorityWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayPost", notes = "Delay unit is microseconds.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-delay/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.ValueOrPriority to be added to list"  )  @Valid @RequestBody TapiPathComputationValueOrPriorityWrapper tapiPathComputationValueOrPriorityBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayPut", notes = "Delay unit is microseconds.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-delay/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedDelayPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.ValueOrPriority to be added or updated"  )  @Valid @RequestBody TapiPathComputationValueOrPriorityWrapper tapiPathComputationValueOrPriorityBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-hops/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsGet", notes = "none", response = TapiPathComputationValueOrPriorityWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.ValueOrPriority", response = TapiPathComputationValueOrPriorityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-hops/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationValueOrPriorityWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-hops/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.ValueOrPriority to be added to list"  )  @Valid @RequestBody TapiPathComputationValueOrPriorityWrapper tapiPathComputationValueOrPriorityBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/max-allowed-hops/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintMaxAllowedHopsPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.ValueOrPriority to be added or updated"  )  @Valid @RequestBody TapiPathComputationValueOrPriorityWrapper tapiPathComputationValueOrPriorityBodyParam);


    @ApiOperation(value = "creates tapi.path.computation.RoutingConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationRoutingConstraintWrapper tapiPathComputationRoutingConstraintBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.RoutingConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationRoutingConstraintWrapper tapiPathComputationRoutingConstraintBodyParam);


    @ApiOperation(value = "creates tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyRiskCharacteristicWrapper tapiTopologyRiskCharacteristicBodyParam);


    @ApiOperation(value = "removes tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristicWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristicWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "creates or updates tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyRiskCharacteristicWrapper tapiTopologyRiskCharacteristicBodyParam);


    @ApiOperation(value = "creates tapi.path.computation.TopologyConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationTopologyConstraintWrapper tapiPathComputationTopologyConstraintBodyParam);


    @ApiOperation(value = "removes tapi.path.computation.TopologyConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.path.computation.TopologyConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdGet", notes = "none", response = TapiPathComputationTopologyConstraintWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.TopologyConstraint", response = TapiPathComputationTopologyConstraintWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationTopologyConstraintWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValueWrapper tapiCommonNameAndValueBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.TopologyConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPathCompServiceuuidTopologyConstraintlocalIdPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationTopologyConstraintWrapper tapiPathComputationTopologyConstraintBodyParam);


    @ApiOperation(value = "returns tapi.path.computation.Path", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidGet", notes = "none", response = TapiPathComputationPathWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.Path", response = TapiPathComputationPathWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.topology.LinkRef", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidLinktopologyUuidlinkUuidGet", notes = "none", response = TapiTopologyLinkRefWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/link={topology-uuid},{link-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLinkRefWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidNamevalueNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristicWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristicWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraintWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraintWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationRoutingConstraintWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristicWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristicWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintMaxAllowedCostGet", notes = "none", response = TapiPathComputationValueOrPriorityWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.ValueOrPriority", response = TapiPathComputationValueOrPriorityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/routing-constraint/max-allowed-cost/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationValueOrPriorityWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintMaxAllowedCostGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintMaxAllowedDelayGet", notes = "Delay unit is microseconds.", response = TapiPathComputationValueOrPriorityWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.ValueOrPriority", response = TapiPathComputationValueOrPriorityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/routing-constraint/max-allowed-delay/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationValueOrPriorityWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintMaxAllowedDelayGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.ValueOrPriority", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintMaxAllowedHopsGet", notes = "none", response = TapiPathComputationValueOrPriorityWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.ValueOrPriority", response = TapiPathComputationValueOrPriorityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/routing-constraint/max-allowed-hops/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationValueOrPriorityWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintMaxAllowedHopsGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristicWrapper.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/path={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristicWrapper> dataTapiCommoncontextTapiPathComputationpathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "creates tapi.path.computation.PathComputationContext", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPost", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPost(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added to list"  )  @Valid @RequestBody TapiPathComputationPathComputationContextWrapper tapiPathComputationPathComputationContextBodyParam);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathComputationContext", nickname = "dataTapiCommoncontextTapiPathComputationpathComputationContextPut", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-path-computation:path-computation-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiPathComputationpathComputationContextPut(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathComputationContextWrapper tapiPathComputationPathComputationContextBodyParam);


    @ApiOperation(value = "removes tapi.topology.TopologyContext", nickname = "dataTapiCommoncontextTapiTopologytopologyContextDelete", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataTapiCommoncontextTapiTopologytopologyContextDelete();


    @ApiOperation(value = "returns tapi.topology.TopologyContext", nickname = "dataTapiCommoncontextTapiTopologytopologyContextGet", notes = "Augments the base TAPI Context with TopologyService information", response = TapiTopologyTopologyContextWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyContext", response = TapiTopologyTopologyContextWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyContextWrapper> dataTapiCommoncontextTapiTopologytopologyContextGet();


    @ApiOperation(value = "returns tapi.topology.NetworkTopologyService", nickname = "dataTapiCommoncontextTapiTopologytopologyContextNwTopologyServiceGet", notes = "none", response = TapiTopologyNetworkTopologyServiceWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NetworkTopologyService", response = TapiTopologyNetworkTopologyServiceWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/nw-topology-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNetworkTopologyServiceWrapper> dataTapiCommoncontextTapiTopologytopologyContextNwTopologyServiceGet();


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextNwTopologyServiceNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/nw-topology-service/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextNwTopologyServiceNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextNwTopologyServiceTopologytopologyUuidGet", notes = "none", response = TapiTopologyTopologyRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/nw-topology-service/topology={topology-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextNwTopologyServiceTopologytopologyUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("topology-uuid") String topologyUuid);


    @ApiOperation(value = "creates tapi.topology.TopologyContext", nickname = "dataTapiCommoncontextTapiTopologytopologyContextPost", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataTapiCommoncontextTapiTopologytopologyContextPost(@ApiParam(value = "tapi.topology.TopologyContext to be added to list"  )  @Valid @RequestBody TapiTopologyTopologyContextWrapper tapiTopologyTopologyContextBodyParam);


    @ApiOperation(value = "creates or updates tapi.topology.TopologyContext", nickname = "dataTapiCommoncontextTapiTopologytopologyContextPut", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataTapiCommoncontextTapiTopologytopologyContextPut(@ApiParam(value = "tapi.topology.TopologyContext to be added or updated"  )  @Valid @RequestBody TapiTopologyTopologyContextWrapper tapiTopologyTopologyContextBodyParam);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidBoundaryNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/boundary-node-edge-point={topology-uuid},{node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidBoundaryNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.Topology", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidGet", notes = "none", response = TapiTopologyTopologyWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Topology", response = TapiTopologyTopologyWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.Link", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidGet", notes = "none", response = TapiTopologyLinkWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Link", response = TapiTopologyLinkWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLinkWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/node-edge-point={topology-uuid},{node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.ResilienceType", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidResilienceTypeGet", notes = "none", response = TapiTopologyResilienceTypeWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.ResilienceType", response = TapiTopologyResilienceTypeWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/resilience-type/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyResilienceTypeWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidResilienceTypeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the entity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.topology.ValidationMechanism", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet", notes = "Provides details of the specific validation mechanism(s) used to confirm the presence of an intended topologicalEntity.", response = TapiTopologyValidationMechanismWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.ValidationMechanism", response = TapiTopologyValidationMechanismWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/link={link-uuid}/validation-mechanism={validation-mechanism}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyValidationMechanismWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of validation-mechanism",required=true) @PathVariable("validation-mechanism") String validationMechanism);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidEncapTopologyGet", notes = "none", response = TapiTopologyTopologyRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/encap-topology/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidEncapTopologyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.topology.Node", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidGet", notes = "none", response = TapiTopologyNodeWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Node", response = TapiTopologyNodeWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroupRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet", notes = "NodeRuleGroups may be nested such that finer grained rules may be applied.                  A nested rule group should have a subset of the NEPs of the superior rule group.", response = TapiTopologyNodeRuleGroupRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/composed-rule-group={topology-uuid},{composed-rule-group-node-uuid},{composed-rule-group-node-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeRuleGroupRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("composed-rule-group-node-uuid") String composedRuleGroupNodeUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("composed-rule-group-node-rule-group-uuid") String composedRuleGroupNodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroup", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet", notes = "none", response = TapiTopologyNodeRuleGroupWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroup", response = TapiTopologyNodeRuleGroupWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeRuleGroupWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroupRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet", notes = "The NodeRuleGroups that the InterRuleGroup constrains interconnection between.                  The CEPs of the NEPs of a referenced NodeRuleGroup can interconnect to the CEPs of the NEPs of another referenced NodeRuleGroup constrained by the rules of the InterRuleGroup.", response = TapiTopologyNodeRuleGroupRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/associated-node-rule-group={topology-uuid},{associated-node-rule-group-node-uuid},{associated-node-rule-group-node-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeRuleGroupRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("associated-node-rule-group-node-uuid") String associatedNodeRuleGroupNodeUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("associated-node-rule-group-node-rule-group-uuid") String associatedNodeRuleGroupNodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.InterRuleGroup", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet", notes = "Nested NodeRuleGroups may have InterRuleGroups. The Superior NodeRuleGroup contains the nested NodeRuleGroups and their associated InterRuleGroups.                  This is equivalent to the Node-Topology hierarchy.", response = TapiTopologyInterRuleGroupWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.InterRuleGroup", response = TapiTopologyInterRuleGroupWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyInterRuleGroupWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.topology.PortRoleRule", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdCepPortRoleGet", notes = "Indicates the port role to which the rule applies.                   The port role is interpreted in the context of the connection type which is identified by the connection spec.                   The port role is not meaningful in the absence of a connection spec reference.                  If a node rule group carries a port role, that role applies also to the associated inter rule where the combination of the roles in the node rule groups at the ends of the inter group rule define the connection orientation.                  For example a root-and-leaf connection may be used in a node where a node rule group collects one set of NEPs has the port role 'root' and another node rule group collects another set of NEPs has the port role 'leaf' where these are joined by an inter rule group. This combination specifies an allowed orientation of the root-and-leaf connection.                  No port role statement means all port roles are allowed.", response = TapiTopologyPortRoleRuleWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.PortRoleRule", response = TapiTopologyPortRoleRuleWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/cep-port-role/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyPortRoleRuleWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdCepPortRoleGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.topology.ConnectionSpecReference", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdConnectionSpecReferenceGet", notes = "Identifies the type of connection that the rule applies to.                   If the attribute is not present then the rule applies to all types of connection supported by the device.", response = TapiTopologyConnectionSpecReferenceWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.ConnectionSpecReference", response = TapiTopologyConnectionSpecReferenceWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/connection-spec-reference/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyConnectionSpecReferenceWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdConnectionSpecReferenceGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.topology.Rule", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet", notes = "The list of rules of the InterRuleGroup.", response = TapiTopologyRuleWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRuleWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRuleWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.SignalPropertyRule", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdSignalPropertyGet", notes = "The rule only applies to signals with the properties listed.                   If the attribute is not present then the rule applies to all signals.", response = TapiTopologySignalPropertyRuleWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.SignalPropertyRule", response = TapiTopologySignalPropertyRuleWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/signal-property/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologySignalPropertyRuleWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdSignalPropertyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the entity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet", notes = "NEPs and their client CEPs that the rules apply to.", response = TapiTopologyNodeEdgePointRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/node-edge-point={topology-uuid},{node-edge-point-node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-node-uuid") String nodeEdgePointNodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristicWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristicWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristicWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.topology.PortRoleRule", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdCepPortRoleGet", notes = "Indicates the port role to which the rule applies.                   The port role is interpreted in the context of the connection type which is identified by the connection spec.                   The port role is not meaningful in the absence of a connection spec reference.                  If a node rule group carries a port role, that role applies also to the associated inter rule where the combination of the roles in the node rule groups at the ends of the inter group rule define the connection orientation.                  For example a root-and-leaf connection may be used in a node where a node rule group collects one set of NEPs has the port role 'root' and another node rule group collects another set of NEPs has the port role 'leaf' where these are joined by an inter rule group. This combination specifies an allowed orientation of the root-and-leaf connection.                  No port role statement means all port roles are allowed.", response = TapiTopologyPortRoleRuleWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.PortRoleRule", response = TapiTopologyPortRoleRuleWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/cep-port-role/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyPortRoleRuleWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdCepPortRoleGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.topology.ConnectionSpecReference", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdConnectionSpecReferenceGet", notes = "Identifies the type of connection that the rule applies to.                   If the attribute is not present then the rule applies to all types of connection supported by the device.", response = TapiTopologyConnectionSpecReferenceWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.ConnectionSpecReference", response = TapiTopologyConnectionSpecReferenceWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/connection-spec-reference/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyConnectionSpecReferenceWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdConnectionSpecReferenceGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.topology.Rule", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet", notes = "The list of rules of the NodeRuleGroup.", response = TapiTopologyRuleWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRuleWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRuleWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.SignalPropertyRule", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdSignalPropertyGet", notes = "The rule only applies to signals with the properties listed.                   If the attribute is not present then the rule applies to all signals.", response = TapiTopologySignalPropertyRuleWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.SignalPropertyRule", response = TapiTopologySignalPropertyRuleWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/signal-property/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologySignalPropertyRuleWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdSignalPropertyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the entity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.NepLayerProtocolCapability", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCepLayerProtocollayerProtocolQualifierGet", notes = "none", response = TapiTopologyNepLayerProtocolCapabilityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NepLayerProtocolCapability", response = TapiTopologyNepLayerProtocolCapabilityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-cep-layer-protocol={layer-protocol-qualifier}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNepLayerProtocolCapabilityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCepLayerProtocollayerProtocolQualifierGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid,@ApiParam(value = "Id of available-cep-layer-protocol",required=true) @PathVariable("layer-protocol-qualifier") String layerProtocolQualifier);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePoint", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePoint", response = TapiTopologyNodeEdgePointWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet", notes = "NodeEdgePoint mapped to more than ServiceInterfacePoint (slicing/virtualizing) or a ServiceInterfacePoint mapped to more than one NodeEdgePoint (load balancing/Resilience) should be considered experimental", response = TapiCommonServiceInterfacePointRefWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRefWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/mapped-service-interface-point={service-interface-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRefWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid,@ApiParam(value = "Id of mapped-service-interface-point",required=true) @PathVariable("service-interface-point-uuid") String serviceInterfacePointUuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the entity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathVariable("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the entity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacityWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacityWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the entity. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValueWrapper.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValueWrapper.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/tapi-common:context/tapi-topology:topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValueWrapper> dataTapiCommoncontextTapiTopologytopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);

}
