/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.nextworks.qameleon.pce.api;

import it.nextworks.qameleon.pce.model.TapiCommonGetServiceInterfacePointDetails;
import it.nextworks.qameleon.pce.model.TapiCommonGetServiceInterfacePointList;
import it.nextworks.qameleon.pce.model.TapiCommonGetserviceinterfacepointdetailsInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiCommonUpdateserviceinterfacepointInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiNotificationCreateNotificationSubscriptionService;
import it.nextworks.qameleon.pce.model.TapiNotificationCreatenotificationsubscriptionserviceInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiNotificationDeletenotificationsubscriptionserviceInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiNotificationGetNotificationList;
import it.nextworks.qameleon.pce.model.TapiNotificationGetNotificationSubscriptionServiceDetails;
import it.nextworks.qameleon.pce.model.TapiNotificationGetNotificationSubscriptionServiceList;
import it.nextworks.qameleon.pce.model.TapiNotificationGetSupportedNotificationTypes;
import it.nextworks.qameleon.pce.model.TapiNotificationGetnotificationlistInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiNotificationGetnotificationsubscriptionservicedetailsInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiNotificationUpdateNotificationSubscriptionService;
import it.nextworks.qameleon.pce.model.TapiNotificationUpdatenotificationsubscriptionserviceInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiPathComputationComputeP2PPath;
import it.nextworks.qameleon.pce.model.TapiPathComputationComputep2ppathInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiPathComputationDeleteP2PPath;
import it.nextworks.qameleon.pce.model.TapiPathComputationDeletep2ppathInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiPathComputationOptimizeP2PPath;
import it.nextworks.qameleon.pce.model.TapiPathComputationOptimizep2ppathInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiTopologyGetLinkDetails;
import it.nextworks.qameleon.pce.model.TapiTopologyGetNodeDetails;
import it.nextworks.qameleon.pce.model.TapiTopologyGetNodeEdgePointDetails;
import it.nextworks.qameleon.pce.model.TapiTopologyGetTopologyDetails;
import it.nextworks.qameleon.pce.model.TapiTopologyGetTopologyList;
import it.nextworks.qameleon.pce.model.TapiTopologyGetlinkdetailsInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiTopologyGetnodedetailsInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiTopologyGetnodeedgepointdetailsInputBodyparam;
import it.nextworks.qameleon.pce.model.TapiTopologyGettopologydetailsInputBodyparam;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-23T14:44:33.242Z")

@Api(value = "operations", description = "the operations API")
@RequestMapping(value = "")
public interface OperationsApi {

    @ApiOperation(value = "operates on tapi.common.GetServiceInterfacePointDetails", nickname = "operationsTapiCommongetServiceInterfacePointDetailsPost", notes = "operates on tapi.common.GetServiceInterfacePointDetails", response = TapiCommonGetServiceInterfacePointDetails.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiCommonGetServiceInterfacePointDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-common:get-service-interface-point-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiCommonGetServiceInterfacePointDetails> operationsTapiCommongetServiceInterfacePointDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiCommonGetserviceinterfacepointdetailsInputBodyparam tapiCommonGetserviceinterfacepointdetailsInputBodyParam);


    @ApiOperation(value = "", nickname = "operationsTapiCommongetServiceInterfacePointListPost", notes = "", response = TapiCommonGetServiceInterfacePointList.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiCommonGetServiceInterfacePointList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-common:get-service-interface-point-list/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiCommonGetServiceInterfacePointList> operationsTapiCommongetServiceInterfacePointListPost();


    @ApiOperation(value = "operates on tapi.common.UpdateServiceInterfacePoint", nickname = "operationsTapiCommonupdateServiceInterfacePointPost", notes = "operates on tapi.common.UpdateServiceInterfacePoint", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-common:update-service-interface-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> operationsTapiCommonupdateServiceInterfacePointPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiCommonUpdateserviceinterfacepointInputBodyparam tapiCommonUpdateserviceinterfacepointInputBodyParam);


    @ApiOperation(value = "operates on tapi.notification.CreateNotificationSubscriptionService", nickname = "operationsTapiNotificationcreateNotificationSubscriptionServicePost", notes = "operates on tapi.notification.CreateNotificationSubscriptionService", response = TapiNotificationCreateNotificationSubscriptionService.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationCreateNotificationSubscriptionService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-notification:create-notification-subscription-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiNotificationCreateNotificationSubscriptionService> operationsTapiNotificationcreateNotificationSubscriptionServicePost(@ApiParam(value = ""  )  @Valid @RequestBody TapiNotificationCreatenotificationsubscriptionserviceInputBodyparam tapiNotificationCreatenotificationsubscriptionserviceInputBodyParam);


    @ApiOperation(value = "operates on tapi.notification.DeleteNotificationSubscriptionService", nickname = "operationsTapiNotificationdeleteNotificationSubscriptionServicePost", notes = "operates on tapi.notification.DeleteNotificationSubscriptionService", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-notification:delete-notification-subscription-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> operationsTapiNotificationdeleteNotificationSubscriptionServicePost(@ApiParam(value = ""  )  @Valid @RequestBody TapiNotificationDeletenotificationsubscriptionserviceInputBodyparam tapiNotificationDeletenotificationsubscriptionserviceInputBodyParam);


    @ApiOperation(value = "operates on tapi.notification.GetNotificationList", nickname = "operationsTapiNotificationgetNotificationListPost", notes = "operates on tapi.notification.GetNotificationList", response = TapiNotificationGetNotificationList.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetNotificationList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-notification:get-notification-list/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiNotificationGetNotificationList> operationsTapiNotificationgetNotificationListPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiNotificationGetnotificationlistInputBodyparam tapiNotificationGetnotificationlistInputBodyParam);


    @ApiOperation(value = "operates on tapi.notification.GetNotificationSubscriptionServiceDetails", nickname = "operationsTapiNotificationgetNotificationSubscriptionServiceDetailsPost", notes = "operates on tapi.notification.GetNotificationSubscriptionServiceDetails", response = TapiNotificationGetNotificationSubscriptionServiceDetails.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetNotificationSubscriptionServiceDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-notification:get-notification-subscription-service-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiNotificationGetNotificationSubscriptionServiceDetails> operationsTapiNotificationgetNotificationSubscriptionServiceDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiNotificationGetnotificationsubscriptionservicedetailsInputBodyparam tapiNotificationGetnotificationsubscriptionservicedetailsInputBodyParam);


    @ApiOperation(value = "", nickname = "operationsTapiNotificationgetNotificationSubscriptionServiceListPost", notes = "", response = TapiNotificationGetNotificationSubscriptionServiceList.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetNotificationSubscriptionServiceList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-notification:get-notification-subscription-service-list/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiNotificationGetNotificationSubscriptionServiceList> operationsTapiNotificationgetNotificationSubscriptionServiceListPost();


    @ApiOperation(value = "", nickname = "operationsTapiNotificationgetSupportedNotificationTypesPost", notes = "", response = TapiNotificationGetSupportedNotificationTypes.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetSupportedNotificationTypes.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-notification:get-supported-notification-types/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiNotificationGetSupportedNotificationTypes> operationsTapiNotificationgetSupportedNotificationTypesPost();


    @ApiOperation(value = "operates on tapi.notification.UpdateNotificationSubscriptionService", nickname = "operationsTapiNotificationupdateNotificationSubscriptionServicePost", notes = "operates on tapi.notification.UpdateNotificationSubscriptionService", response = TapiNotificationUpdateNotificationSubscriptionService.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationUpdateNotificationSubscriptionService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-notification:update-notification-subscription-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiNotificationUpdateNotificationSubscriptionService> operationsTapiNotificationupdateNotificationSubscriptionServicePost(@ApiParam(value = ""  )  @Valid @RequestBody TapiNotificationUpdatenotificationsubscriptionserviceInputBodyparam tapiNotificationUpdatenotificationsubscriptionserviceInputBodyParam);


    @ApiOperation(value = "operates on tapi.path.computation.ComputeP2PPath", nickname = "operationsTapiPathComputationcomputeP2PPathPost", notes = "operates on tapi.path.computation.ComputeP2PPath", response = TapiPathComputationComputeP2PPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiPathComputationComputeP2PPath.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-path-computation:compute-p-2-p-path/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiPathComputationComputeP2PPath> operationsTapiPathComputationcomputeP2PPathPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiPathComputationComputep2ppathInputBodyparam tapiPathComputationComputep2ppathInputBodyParam);


    @ApiOperation(value = "operates on tapi.path.computation.DeleteP2PPath", nickname = "operationsTapiPathComputationdeleteP2PPathPost", notes = "operates on tapi.path.computation.DeleteP2PPath", response = TapiPathComputationDeleteP2PPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiPathComputationDeleteP2PPath.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-path-computation:delete-p-2-p-path/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiPathComputationDeleteP2PPath> operationsTapiPathComputationdeleteP2PPathPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiPathComputationDeletep2ppathInputBodyparam tapiPathComputationDeletep2ppathInputBodyParam);


    @ApiOperation(value = "operates on tapi.path.computation.OptimizeP2PPath", nickname = "operationsTapiPathComputationoptimizeP2PPathPost", notes = "operates on tapi.path.computation.OptimizeP2PPath", response = TapiPathComputationOptimizeP2PPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiPathComputationOptimizeP2PPath.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-path-computation:optimize-p-2-p-path/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiPathComputationOptimizeP2PPath> operationsTapiPathComputationoptimizeP2PPathPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiPathComputationOptimizep2ppathInputBodyparam tapiPathComputationOptimizep2ppathInputBodyParam);


    @ApiOperation(value = "operates on tapi.topology.GetLinkDetails", nickname = "operationsTapiTopologygetLinkDetailsPost", notes = "operates on tapi.topology.GetLinkDetails", response = TapiTopologyGetLinkDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetLinkDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-topology:get-link-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiTopologyGetLinkDetails> operationsTapiTopologygetLinkDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiTopologyGetlinkdetailsInputBodyparam tapiTopologyGetlinkdetailsInputBodyParam);


    @ApiOperation(value = "operates on tapi.topology.GetNodeDetails", nickname = "operationsTapiTopologygetNodeDetailsPost", notes = "operates on tapi.topology.GetNodeDetails", response = TapiTopologyGetNodeDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetNodeDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-topology:get-node-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiTopologyGetNodeDetails> operationsTapiTopologygetNodeDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiTopologyGetnodedetailsInputBodyparam tapiTopologyGetnodedetailsInputBodyParam);


    @ApiOperation(value = "operates on tapi.topology.GetNodeEdgePointDetails", nickname = "operationsTapiTopologygetNodeEdgePointDetailsPost", notes = "operates on tapi.topology.GetNodeEdgePointDetails", response = TapiTopologyGetNodeEdgePointDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetNodeEdgePointDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-topology:get-node-edge-point-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiTopologyGetNodeEdgePointDetails> operationsTapiTopologygetNodeEdgePointDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiTopologyGetnodeedgepointdetailsInputBodyparam tapiTopologyGetnodeedgepointdetailsInputBodyParam);


    @ApiOperation(value = "operates on tapi.topology.GetTopologyDetails", nickname = "operationsTapiTopologygetTopologyDetailsPost", notes = "operates on tapi.topology.GetTopologyDetails", response = TapiTopologyGetTopologyDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetTopologyDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-topology:get-topology-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiTopologyGetTopologyDetails> operationsTapiTopologygetTopologyDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody TapiTopologyGettopologydetailsInputBodyparam tapiTopologyGettopologydetailsInputBodyParam);


    @ApiOperation(value = "", nickname = "operationsTapiTopologygetTopologyListPost", notes = "", response = TapiTopologyGetTopologyList.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetTopologyList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/tapi-topology:get-topology-list/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    ResponseEntity<TapiTopologyGetTopologyList> operationsTapiTopologygetTopologyListPost();

}
